plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.0'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'jacoco'
}

group = 'com.sprint.mission'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

tasks.withType(JavaCompile) {
	options.compilerArgs.add("-parameters")
}


configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

compileJava {
	options.compilerArgs += [
			'-Amapstruct.defaultComponentModel=spring'
	]
}

compileTestJava {
	options.compilerArgs += [
			'-Amapstruct.defaultComponentModel=spring'
	]
}


dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-aop'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	runtimeOnly 'org.postgresql:postgresql'
	runtimeOnly 'com.h2database:h2'

	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.6'

	implementation 'org.mapstruct:mapstruct:1.5.5.Final'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'

    implementation 'de.codecentric:spring-boot-admin-starter-server:3.4.5'

    implementation 'software.amazon.awssdk:s3:2.20.70'
    implementation 'software.amazon.awssdk:auth:2.20.70'

}

tasks.named('test') {
	useJUnitPlatform()
}

jacoco {
	toolVersion = "0.8.10"
	layout.buildDirectory.dir("reports/jacoco")
}

test {
	finalizedBy jacocoTestReport
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required = true
		html.required = true
	}

	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					/*
					"com/sprint/mission/discodeit/dto/**",
					"com/sprint/mission/discodeit/storage/**",
					"com/sprint/mission/discodeit/config/**",
					"com/sprint/mission/discodeit/util/**",
					"com/sprint/mission/discodeit/*Application",
					"com/sprint/mission/discodeit/exception/**",
					"com/sprint/mission/discodeit/mapper/**"
					*/
			])
		}))
	}
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			enabled = true
			element = 'CLASS'

			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
				minimum = 0.00
			}

			limit {
				counter = 'METHOD'
				value = 'COVEREDRATIO'
				minimum = 0.00
			}
		}
	}
}
